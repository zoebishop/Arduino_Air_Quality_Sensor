#include "SdsDustSensor.h"
#include <LiquidCrystal.h>

//Global Var
#define contra 9 //Define the pin that controls the contrast of the screen
#define bri 10 //Define the pin the controls the brightness of the screen
//Both pins are PWM so you can analogWrite to them and have them output a variable value

int rxPin = 0;
int txPin = 1;
SdsDustSensor sds(rxPin, txPin);

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void setup() {
  lcd.begin(16,2);
  pinMode(contra, OUTPUT); //set pin 9 to OUTPUT
  pinMode(bri, OUTPUT); //Set pin 10 to OUTPUT
  //pinMode-ing OUTPUT makes the specified pin output power
  digitalWrite(contra, LOW); /*outputs no power to the contrast pin.
                            this lets you see the words*/
  analogWrite(bri, 255); //Outputs full power to the screen brightness LED

  lcd.println(sds.queryFirmwareVersion().toString()); // prints firmware version
  lcd.println(sds.setActiveReportingMode().toString()); // ensures sensor is in 'active' reporting mode
  lcd.println(sds.setContinuousWorkingPeriod().toString()); // ensures sensor has continuous working period - default but not recommended
}

void loop() {
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 1);
  
  PmResult pm = sds.readPm();
  if (pm.isOk()) {
    lcd.print("PM2.5 = ");
    lcd.print(pm.pm25);
    lcd.print(", PM10 = ");
    lcd.println(pm.pm10);

    // if you want to just print the measured values, you can use toString() method as well
    lcd.println(pm.toString());
  } else {
    // notice that loop delay is set to 0.5s and some reads are not available
    lcd.print("Could not read values from sensor, reason: ");
    lcd.println(pm.statusToString());
  }

  delay(500);
}
